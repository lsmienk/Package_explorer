{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar _jsxFileName = \"/Users/lsmienk/Codam/reaktor_tech_assignment/pages/[pack].js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport Nav from '../components/nav';\nimport { useRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch';\n\nvar PackageInfo = function PackageInfo(_ref) {\n  var packages = _ref.packages,\n      url = _ref.url;\n  var router = useRouter();\n  var pack = router.query.pack;\n  var packageInfo = packages.find(function (item) {\n    return item.Package === pack;\n  });\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Subpage: \", pack), packageInfo && _Object$keys(packageInfo).map(function (key) {\n    return __jsx(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, key, \": \", packageInfo[key]);\n  }));\n};\n\nPackageInfo.getInitialProps = function _callee() {\n  var res, json;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/packages'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          json = _context.sent;\n          return _context.abrupt(\"return\", {\n            packages: json\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default PackageInfo;","map":{"version":3,"sources":["/Users/lsmienk/Codam/reaktor_tech_assignment/pages/[pack].js"],"names":["React","Head","Nav","useRouter","fetch","PackageInfo","packages","url","router","pack","query","packageInfo","find","item","Package","map","key","getInitialProps","res","json"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAuB;AAAA,MAApBC,QAAoB,QAApBA,QAAoB;AAAA,MAAVC,GAAU,QAAVA,GAAU;AACvC,MAAMC,MAAM,GAAGL,SAAS,EAAxB;AADuC,MAG/BM,IAH+B,GAGtBD,MAAM,CAACE,KAHe,CAG/BD,IAH+B;AAKvC,MAAME,WAAW,GAAGL,QAAQ,CAACM,IAAT,CAAc,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,OAAL,KAAiBL,IAA3B;AAAA,GAAd,CAApB;AAGA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAcA,IAAd,CADJ,EAEKE,WAAW,IAAI,aAAYA,WAAZ,EACXI,GADW,CACP,UAACC,GAAD;AAAA,WAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,GAAL,QAAYL,WAAW,CAACK,GAAD,CAAvB,CAAV;AAAA,GADO,CAFpB,CADJ;AASH,CAjBD;;AAmBAX,WAAW,CAACY,eAAZ,GAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACRb,KAAK,CAAC,oCAAD,CADG;;AAAA;AACpBc,UAAAA,GADoB;AAAA;AAAA,2CAEPA,GAAG,CAACC,IAAJ,EAFO;;AAAA;AAEpBA,UAAAA,IAFoB;AAAA,2CAGnB;AAAEb,YAAAA,QAAQ,EAAEa;AAAZ,WAHmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9B;;AAMA,eAAed,WAAf","sourcesContent":["import React from 'react'\nimport Head from 'next/head'\nimport Nav from '../components/nav'\nimport { useRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch'\n\nconst PackageInfo = ({ packages, url }) => {\n    const router = useRouter();\n\n    const { pack } = router.query;\n\n    const packageInfo = packages.find((item) => item.Package === pack);\n    \n\n    return (\n        <div>\n            <h1>Subpage: {pack}</h1>\n            {packageInfo && Object.keys(packageInfo)\n                .map((key) => (<h5>{key}: {packageInfo[key]}</h5>))}\n        </div>\n\n        \n    )\n}\n\nPackageInfo.getInitialProps = async () => {\n    const res = await fetch('http://localhost:3000/api/packages')\n    const json = await res.json();\n    return { packages: json }\n}\n\nexport default PackageInfo\n"]},"metadata":{},"sourceType":"module"}