{"ast":null,"code":"import fs from 'fs';\nexport default ((req, res) => {\n  fs.readFile(process.env.filePath, 'utf8', function (err, data) {\n    let packages = data.split('\\n\\n');\n    packages.sort();\n    const result = packages.reduce((acc, current) => {\n      // REGEX MAGIC\n      const pairs = current.split(/(?<=^|[\\r\\n])([A-Z][^:]*): ([^\\r\\n]*(?:[\\r\\n]+(?![A-Z].*:).*)*)/);\n      let i = 0;\n      const obj = {};\n\n      while (pairs[i] !== undefined) {\n        if (pairs[i] == '' || '\\n') {\n          i++;\n          obj[pairs[i++]] = pairs[i++];\n        }\n      }\n\n      acc.push(obj);\n      return acc;\n    }, []);\n    result.slice(1);\n    res.end(JSON.stringify(result));\n  });\n});","map":{"version":3,"sources":["/Users/lsmienk/Codam/reaktor_tech_assignment/pages/api/packages.js"],"names":["fs","req","res","readFile","process","env","filePath","err","data","packages","split","sort","result","reduce","acc","current","pairs","i","obj","undefined","push","slice","end","JSON","stringify"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AAEA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBF,EAAAA,EAAE,CAACG,QAAH,CAAYC,OAAO,CAACC,GAAR,CAAYC,QAAxB,EAAkC,MAAlC,EAA0C,UAASC,GAAT,EAAcC,IAAd,EAAoB;AAC1D,QAAIC,QAAQ,GAAGD,IAAI,CAACE,KAAL,CAAW,MAAX,CAAf;AACAD,IAAAA,QAAQ,CAACE,IAAT;AACA,UAAMC,MAAM,GAAGH,QAAQ,CAACI,MAAT,CAAgB,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC7C;AAEA,YAAMC,KAAK,GAAGD,OAAO,CAACL,KAAR,CAAc,iEAAd,CAAd;AACA,UAAIO,CAAC,GAAG,CAAR;AACA,YAAMC,GAAG,GAAG,EAAZ;;AACA,aAAMF,KAAK,CAACC,CAAD,CAAL,KAAaE,SAAnB,EAA8B;AAC1B,YAAIH,KAAK,CAACC,CAAD,CAAL,IAAY,EAAZ,IAAkB,IAAtB,EAA4B;AACxBA,UAAAA,CAAC;AACDC,UAAAA,GAAG,CAACF,KAAK,CAACC,CAAC,EAAF,CAAN,CAAH,GAAkBD,KAAK,CAACC,CAAC,EAAF,CAAvB;AACH;AACJ;;AACDH,MAAAA,GAAG,CAACM,IAAJ,CAASF,GAAT;AACA,aAAOJ,GAAP;AACH,KAdc,EAcZ,EAdY,CAAf;AAeAF,IAAAA,MAAM,CAACS,KAAP,CAAa,CAAb;AACAnB,IAAAA,GAAG,CAACoB,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAeZ,MAAf,CAAR;AACH,GApBD;AAqBH,CAtBD","sourcesContent":["import fs from 'fs'\n\nexport default (req, res) => {\n    fs.readFile(process.env.filePath, 'utf8', function(err, data) {\n        let packages = data.split('\\n\\n');\n        packages.sort();\n        const result = packages.reduce((acc, current) => {\n            // REGEX MAGIC\n\n            const pairs = current.split(/(?<=^|[\\r\\n])([A-Z][^:]*): ([^\\r\\n]*(?:[\\r\\n]+(?![A-Z].*:).*)*)/);\n            let i = 0;\n            const obj = {};\n            while(pairs[i] !== undefined) {\n                if (pairs[i] == '' || '\\n') {\n                    i++;\n                    obj[pairs[i++]] = pairs[i++];\n                }\n            }\n            acc.push(obj);\n            return acc;\n        }, []);\n        result.slice(1);\n        res.end(JSON.stringify(result));\n    })\n}"]},"metadata":{},"sourceType":"module"}